---

# if keeping as root, needs
# git config --global --add safe.directory /var/_pandora/pandora
# but can't update as pandora_user
# chown -R _pandora /var/_pandora/pandora
- name: Git clone repository
  ansible.builtin.git:
    repo: https://github.com/pandora-analysis/pandora.git
    dest: "{{ pandora_root }}"
    version: "{{ pandora_version }}"
    update: no
    force: no

- name: Poetry | check system git config
  ansible.builtin.command: "poetry config experimental.system-git-client"
  args:
    chdir: "{{ pandora_root }}"
  environment:
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:{{ poetry_root }}/bin"
    XDG_CONFIG_HOME: "{{ pandora_home }}/.config"
  changed_when: false
  register: poetry_git_sys

- name: Poetry | use system git
  ansible.builtin.command:  # noqa no-changed-when
    cmd: "poetry config experimental.system-git-client {{ pandora_poetry_system_git | bool | lower }} --local"
  args:
    chdir: "{{ pandora_root }}"
  environment:
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:{{ poetry_root }}/bin"
    XDG_CONFIG_HOME: "{{ pandora_home }}/.config"
  when: poetry_git_sys.stdout != pandora_poetry_system_git | bool | lower

- name: Install pandora
  ansible.builtin.command: poetry install
  args:
    chdir: "{{ pandora_root }}"
    # creates: "{{ pandora_root }}/.cache/pypoetry/virtualenvs/pandora-<RANDOM>-py3.10/bin/weasyprint"
  environment:
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:{{ poetry_root }}/bin"
    XDG_CONFIG_HOME: "{{ pandora_home }}/.config"
  register: poetry_install
  changed_when: "'No dependencies to install or update' not in poetry_install.stdout"

- name: Get pandora poetry virtualenv bin path
  ansible.builtin.command: find /var/_pandora/.cache/pypoetry/virtualenvs/ -maxdepth 2 -type d -ipath '*/bin'
  register: venv_pandora
  changed_when: false
  failed_when: venv_pandora.rc != 0

# https://github.com/unoconv/unoconv/issues/372#issuecomment-1079801009
- name: Ensure uno library is available in poetry environment
  ansible.builtin.file:
    src: "/usr/lib/python3/dist-packages/{{ item }}"
    dest: "{{ venv_pandora.stdout }}/../lib/python{{ pandora_python_v }}/site-packages/{{ item }}"
    state: link
    mode: '0644'
  loop:
    - uno.py
    - unohelper.py

- name: Ensure .env is configured
  ansible.builtin.template:
    src: env.j2
    dest: "{{ pandora_root }}/.env"
    mode: '0644'
    owner: "{{ pandora_user }}"
    backup: "{{ pandora_backup }}"
  notify:
    - Restart pandora-imap_fetcher
    - Restart pandora-kvrocks
    - Restart pandora-redis
    - Restart pandora-unoserver
    - Restart pandora-web
    - Restart pandora-workers

- name: Ensure config.json is configured
  ansible.builtin.template:
    src: config.json.j2
    dest: "{{ pandora_root }}/config/generic.json"
    mode: '0644'
    owner: "{{ pandora_user }}"
    backup: "{{ pandora_backup }}"
    # FIXME! os.chmod(b_path, mode)\nPermissionError: [Errno 1] Operation not permitted:
    # validate: "python3 -mjson.tool %s"
  notify:
    - Restart pandora-imap_fetcher
    - Restart pandora-kvrocks
    - Restart pandora-redis
    - Restart pandora-unoserver
    - Restart pandora-web
    - Restart pandora-workers

- name: Ensure logging.json is configured
  ansible.builtin.template:
    src: logging.json.j2
    dest: "{{ pandora_root }}/config/logging.json"
    mode: '0644'
    owner: "{{ pandora_user }}"
    backup: "{{ pandora_backup }}"
  notify:
    - Restart pandora-imap_fetcher
    - Restart pandora-kvrocks
    - Restart pandora-redis
    - Restart pandora-unoserver
    - Restart pandora-web
    - Restart pandora-workers

- name: Validate config files are valid json
  ansible.builtin.shell:
    cmd: "python3 -mjson.tool {{ item }} > /dev/null"
  loop:
    - "{{ pandora_root }}/config/generic.json"
    - "{{ pandora_root }}/config/logging.json"
  changed_when: false

- name: Ensure working git pull
  ansible.builtin.replace:
    dest: "{{ pandora_root }}/bin/update.py"
    regexp: "^    run_command.'git pull .*'."
    replace: "    run_command('git pull --recurse-submodules origin main')"
    mode: '0755'
    owner: "{{ pandora_user }}"
    backup: "{{ pandora_backup }}"

- name: Ensure kvrocks binding on localhost
  ansible.builtin.replace:
    dest: "{{ pandora_root }}/storage/kvrocks.conf"
    regexp: "^bind .*"
    replace: "bind 127.0.0.1"
    mode: '0644'
    owner: "{{ pandora_user }}"
    backup: "{{ pandora_backup }}"
  notify:
    - Restart pandora-kvrocks

- name: Ensure web/static lib dir exists
  ansible.builtin.file:
    path: "{{ pandora_root }}/website/web/static/{{ item }}"
    owner: "{{ pandora_user }}"
    mode: '0755'
    state: directory
  loop:
    - js/lib
    - css/lib

- name: Download web dependencies
  ansible.builtin.get_url:
    url: "{{ item.u }}"
    dest: "{{ pandora_root }}/website/web/static/{{ item.d }}"
    mode: '0644'
    checksum: "{{ item.c }}"
  loop: "{{ pandora_web_static }}"
  register: dl_result
  until: dl_result is success

- name: Download dropzone dist
  ansible.builtin.get_url:
    url: "https://github.com/dropzone/dropzone/releases/download/{{ pandora_dropzone_version }}/dist.zip"
    dest: "{{ pandora_home }}/dropzone-dist.zip"
    mode: '0600'
    checksum: "{{ pandora_dropzone_checksum }}"
  register: dl_result
  until: dl_result is success

- name: Unarchive dropzone dist
  ansible.builtin.unarchive:
    src: "{{ pandora_home }}/dropzone-dist.zip"
    dest: "{{ pandora_home }}"
    mode: '0700'
    remote_src: true

- name: Download moment dist
  ansible.builtin.get_url:
    url: "https://github.com/moment/moment/archive/refs/tags/{{ pandora_moment_version }}.tar.gz"
    dest: "{{ pandora_home }}/moment.tar.gz"
    mode: '0600'
    checksum: "{{ pandora_moment_checksum }}"

- name: Unarchive moment dist
  ansible.builtin.unarchive:
    src: "{{ pandora_home }}/moment.tar.gz"
    dest: "{{ pandora_home }}"
    mode: '0700'
    remote_src: true

- name: Set dropzone and moment files in web root
  ansible.builtin.copy:
    src: "{{ pandora_home }}/{{ item.s }}"
    dest: "{{ pandora_root }}/website/web/static/{{ item.d }}"
    mode: '0644'
    remote_src: yes
    backup: "{{ pandora_backup }}"
  loop:
    - { s: dist/dropzone-min.js, d: js/lib/dropzone-min.js }
    - { s: dist/dropzone.css, d: css/lib/dropzone.css }
    - { s: "moment-{{ pandora_moment_version }}/min/moment-with-locales.min.js", d: js/lib/moment-with-locales.min.js }

- name: Ensure mail.json is configured for imap fetcher
  ansible.builtin.template:
    src: mail.json.j2
    dest: "{{ pandora_root }}/config/mail.json"
    mode: '0644'
    owner: "{{ pandora_user }}"
    backup: "{{ pandora_backup }}"
  when: pandora_imap_fetcher_enable | bool

- name: Import recent_tasks
  ansible.builtin.import_tasks: recent_tasks.yml
  when: pandora_recent_tasks | bool

- name: Import disclaimer
  ansible.builtin.import_tasks: disclaimer.yml
  when: pandora_disclaimer_header | string

- name: Import purge
  ansible.builtin.import_tasks: purge.yml
  when: pandora_purge_enabled | bool
