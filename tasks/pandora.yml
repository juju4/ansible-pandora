---

- name: ensure pandora user exists
  ansible.builtin.user:
    name: "{{ pandora_user }}"
    home: "{{ pandora_home }}"
    system: true

- name: Ensure right permissions for pandora home
  ansible.builtin.file:
    path: "{{ pandora_home }}"
    owner: "{{ pandora_user }}"
    mode: '0755'
    state: directory

# if keeping as root, needs
# git config --global --add safe.directory /var/_pandora/pandora
# but can't update as pandora_user
# chown -R _pandora /var/_pandora/pandora
- name: git clone repository
  ansible.builtin.git:
    repo: https://github.com/pandora-analysis/pandora.git
    dest: "{{ pandora_root }}"
    version: "{{ pandora_version }}"
    update: no
    force: no
  become: yes
  become_user: "{{ pandora_user }}"

- name: Install pandora
  ansible.builtin.command: poetry install
  args:
    chdir: "{{ pandora_root }}"
    # creates: "{{ pandora_root }}/.cache/pypoetry/virtualenvs/pandora-<RANDOM>-py3.10/bin/weasyprint"
  environment:
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:{{ poetry_root }}/bin"
  become: yes
  become_user: "{{ pandora_user }}"
  become_flags: "-H"
  register: poetry_install
  changed_when: "'No dependencies to install or update' not in poetry_install.stdout"

- name: Ensure .env is configured
  ansible.builtin.copy:
    dest: "{{ pandora_root }}/.env"
    content: "PANDORA_HOME=\"{{ pandora_root }}\""
    mode: '0644'
    owner: "{{ pandora_user }}"
    backup: "{{ pandora_backup }}"

- name: Ensure config.json is configured
  ansible.builtin.template:
    src: config.json.j2
    dest: "{{ pandora_root }}/config/generic.json"
    mode: '0644'
    owner: "{{ pandora_user }}"
    backup: "{{ pandora_backup }}"

- name: Ensure working git pull
  ansible.builtin.replace:
    dest: "{{ pandora_root }}/bin/update.py"
    regexp: "^    run_command.'git pull .*'."
    replace: "    run_command('git pull --recurse-submodules origin main')"
    mode: '0755'
    owner: "{{ pandora_user }}"
    backup: "{{ pandora_backup }}"
  notify:
    - restart pandora

- name: Ensure kvrocks binding on localhost
  ansible.builtin.replace:
    dest: "{{ pandora_root }}/storage/kvrocks.conf"
    regexp: "^bind .*"
    replace: "bind 127.0.0.1"
    mode: '0644'
    owner: "{{ pandora_user }}"
    backup: "{{ pandora_backup }}"
  notify:
    - restart pandora
  when: false

- name: Ensure web/static lib dir exists
  ansible.builtin.file:
    path: "{{ pandora_root }}/website/web/static/{{ item }}"
    owner: "{{ pandora_user }}"
    mode: '0755'
    state: directory
  loop:
    - js/lib
    - css/lib

- name: Download web dependencies
  ansible.builtin.get_url:
    url: "{{ item.u }}"
    dest: "{{ pandora_root }}/website/web/static/{{ item.d }}"
    mode: '0644'
    checksum: "{{ item.c }}"
  loop: "{{ pandora_web_static }}"

- name: Download dropzone dist
  ansible.builtin.get_url:
    url: "https://github.com/dropzone/dropzone/releases/download/{{ pandora_dropzone_version }}/dist.zip"
    dest: "{{ pandora_home }}/dropzone-dist.zip"
    mode: '0600'
    checksum: "sha256:4b0100a34ee5751ca147ab6f7964a822b212554807676cf44dba6b6e29ab9ba5"

- name: Unarchive dropzone dist
  ansible.builtin.unarchive:
    src: "{{ pandora_home }}/dropzone-dist.zip"
    dest: "{{ pandora_home }}"
    mode: '0600'
    remote_src: true

- name: Set dropzone files in web root
  ansible.builtin.copy:
    src: "{{ pandora_home }}/{{ item.s }}"
    dest: "{{ pandora_root }}/website/web/static/{{ item.d }}"
    mode: '0644'
    remote_src: yes
    backup: "{{ pandora_backup }}"
  loop:
    - { s: dist/dropzone-min.js, d: js/lib/dropzone-min.js }
    - { s: dist/dropzone.css, d: css/lib/dropzone.css }
